package zzh.com.haooa.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zzh.com.haooa.bean.UserInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_BEAN".
*/
public class UserInfoBeanDao extends AbstractDao<UserInfoBean, String> {

    public static final String TABLENAME = "USER_INFO_BEAN";

    /**
     * Properties of entity UserInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HxUsername = new Property(0, String.class, "HxUsername", true, "HX_USERNAME");
        public final static Property Nick = new Property(1, String.class, "nick", false, "NICK");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property Head = new Property(3, String.class, "head", false, "HEAD");
        public final static Property DepartmentID = new Property(4, String.class, "departmentID", false, "DEPARTMENT_ID");
        public final static Property DepartmentName = new Property(5, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property Mail = new Property(7, String.class, "mail", false, "MAIL");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property Role = new Property(9, int.class, "role", false, "ROLE");
        public final static Property CreateTime = new Property(10, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(11, String.class, "updateTime", false, "UPDATE_TIME");
    }


    public UserInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_BEAN\" (" + //
                "\"HX_USERNAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: HxUsername
                "\"NICK\" TEXT," + // 1: nick
                "\"SEX\" TEXT," + // 2: sex
                "\"HEAD\" TEXT," + // 3: head
                "\"DEPARTMENT_ID\" TEXT," + // 4: departmentID
                "\"DEPARTMENT_NAME\" TEXT," + // 5: departmentName
                "\"PHONE\" TEXT," + // 6: phone
                "\"MAIL\" TEXT," + // 7: mail
                "\"ADDRESS\" TEXT," + // 8: address
                "\"ROLE\" INTEGER NOT NULL ," + // 9: role
                "\"CREATE_TIME\" TEXT," + // 10: createTime
                "\"UPDATE_TIME\" TEXT);"); // 11: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        String HxUsername = entity.getHxUsername();
        if (HxUsername != null) {
            stmt.bindString(1, HxUsername);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(4, head);
        }
 
        String departmentID = entity.getDepartmentID();
        if (departmentID != null) {
            stmt.bindString(5, departmentID);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(6, departmentName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(8, mail);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
        stmt.bindLong(10, entity.getRole());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(11, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(12, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        String HxUsername = entity.getHxUsername();
        if (HxUsername != null) {
            stmt.bindString(1, HxUsername);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(4, head);
        }
 
        String departmentID = entity.getDepartmentID();
        if (departmentID != null) {
            stmt.bindString(5, departmentID);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(6, departmentName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(8, mail);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
        stmt.bindLong(10, entity.getRole());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(11, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(12, updateTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfoBean readEntity(Cursor cursor, int offset) {
        UserInfoBean entity = new UserInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // HxUsername
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nick
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // head
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // departmentID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // departmentName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mail
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address
            cursor.getInt(offset + 9), // role
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoBean entity, int offset) {
        entity.setHxUsername(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNick(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHead(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartmentID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepartmentName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRole(cursor.getInt(offset + 9));
        entity.setCreateTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdateTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfoBean entity, long rowId) {
        return entity.getHxUsername();
    }
    
    @Override
    public String getKey(UserInfoBean entity) {
        if(entity != null) {
            return entity.getHxUsername();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoBean entity) {
        return entity.getHxUsername() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
