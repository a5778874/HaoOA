package zzh.com.haooa.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zzh.com.haooa.bean.DepartmentBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEPARTMENT_BEAN".
*/
public class DepartmentBeanDao extends AbstractDao<DepartmentBean, String> {

    public static final String TABLENAME = "DEPARTMENT_BEAN";

    /**
     * Properties of entity DepartmentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DepartmentID = new Property(0, String.class, "departmentID", true, "DEPARTMENT_ID");
        public final static Property LeaderID = new Property(1, String.class, "leaderID", false, "LEADER_ID");
        public final static Property DepartmentName = new Property(2, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(4, String.class, "updateTime", false, "UPDATE_TIME");
    }


    public DepartmentBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPARTMENT_BEAN\" (" + //
                "\"DEPARTMENT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: departmentID
                "\"LEADER_ID\" TEXT," + // 1: leaderID
                "\"DEPARTMENT_NAME\" TEXT," + // 2: departmentName
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"UPDATE_TIME\" TEXT);"); // 4: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPARTMENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DepartmentBean entity) {
        stmt.clearBindings();
 
        String departmentID = entity.getDepartmentID();
        if (departmentID != null) {
            stmt.bindString(1, departmentID);
        }
 
        String leaderID = entity.getLeaderID();
        if (leaderID != null) {
            stmt.bindString(2, leaderID);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(3, departmentName);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(5, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DepartmentBean entity) {
        stmt.clearBindings();
 
        String departmentID = entity.getDepartmentID();
        if (departmentID != null) {
            stmt.bindString(1, departmentID);
        }
 
        String leaderID = entity.getLeaderID();
        if (leaderID != null) {
            stmt.bindString(2, leaderID);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(3, departmentName);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(5, updateTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DepartmentBean readEntity(Cursor cursor, int offset) {
        DepartmentBean entity = new DepartmentBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // departmentID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // leaderID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // departmentName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DepartmentBean entity, int offset) {
        entity.setDepartmentID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLeaderID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDepartmentName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DepartmentBean entity, long rowId) {
        return entity.getDepartmentID();
    }
    
    @Override
    public String getKey(DepartmentBean entity) {
        if(entity != null) {
            return entity.getDepartmentID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DepartmentBean entity) {
        return entity.getDepartmentID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
