package zzh.com.haooa.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zzh.com.haooa.bean.UserAccountTableBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ACCOUNT_TABLE_BEAN".
*/
public class UserAccountTableBeanDao extends AbstractDao<UserAccountTableBean, String> {

    public static final String TABLENAME = "USER_ACCOUNT_TABLE_BEAN";

    /**
     * Properties of entity UserAccountTableBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HxUsername = new Property(0, String.class, "HxUsername", true, "HX_USERNAME");
        public final static Property Head = new Property(1, String.class, "head", false, "HEAD");
        public final static Property IsOnline = new Property(2, boolean.class, "isOnline", false, "IS_ONLINE");
    }


    public UserAccountTableBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserAccountTableBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ACCOUNT_TABLE_BEAN\" (" + //
                "\"HX_USERNAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: HxUsername
                "\"HEAD\" TEXT," + // 1: head
                "\"IS_ONLINE\" INTEGER NOT NULL );"); // 2: isOnline
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ACCOUNT_TABLE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserAccountTableBean entity) {
        stmt.clearBindings();
 
        String HxUsername = entity.getHxUsername();
        if (HxUsername != null) {
            stmt.bindString(1, HxUsername);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(2, head);
        }
        stmt.bindLong(3, entity.getIsOnline() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserAccountTableBean entity) {
        stmt.clearBindings();
 
        String HxUsername = entity.getHxUsername();
        if (HxUsername != null) {
            stmt.bindString(1, HxUsername);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(2, head);
        }
        stmt.bindLong(3, entity.getIsOnline() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserAccountTableBean readEntity(Cursor cursor, int offset) {
        UserAccountTableBean entity = new UserAccountTableBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // HxUsername
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // head
            cursor.getShort(offset + 2) != 0 // isOnline
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserAccountTableBean entity, int offset) {
        entity.setHxUsername(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHead(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsOnline(cursor.getShort(offset + 2) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserAccountTableBean entity, long rowId) {
        return entity.getHxUsername();
    }
    
    @Override
    public String getKey(UserAccountTableBean entity) {
        if(entity != null) {
            return entity.getHxUsername();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserAccountTableBean entity) {
        return entity.getHxUsername() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
